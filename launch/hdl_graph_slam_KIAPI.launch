<?xml version="1.0"?>
<launch>
  <!-- arguments -->
  <arg name="nodelet_manager" default="velodyne_nodelet_manager" />
  <arg name="enable_floor_detection" default="true" />

  <arg name="points_topic" default="/ouster/points" />
  <arg name="lidar_tf" default="base_link" />
    <!-- ICP, GICP, NDT, GICP_OMP, NDT_OMP, FAST_GICP(recommended), or FAST_VGICP -->
  <arg name="matching_algo" default="FAST_GICP" />

  <arg name="enable_gps" default="true" />
  <arg name="gps_topic" default="/raw_fix" />
  <arg name="gps_tf" default="/imu" />
  
  <arg name="enable_imu_deskewing" default="false" />
  <arg name="enable_imu_acc" default="false" />
  <arg name="enable_imu_ori" default="false" />
  <arg name="imu_topic" default="/imu/data" />
  <arg name="imu_tf" default="/imu" />
 
  <arg name="map_frame_id" default="map" />
  <arg name="lidar_odom_frame_id" default="odom" />

  <!-- optional arguments -->
  <arg name="enable_robot_odometry_init_guess" default="false" />
  <arg name="robot_odom_frame_id" default="robot_odom" />

  <!-- transformation between lidar and base_link -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="lidar2base_publisher" args="0.887 0 2.13 3.141592 0 0 base_link $(arg lidar_tf) 10" /> -->
  <!-- <node pkg="tf" type="static_transform_publisher" name="gps2base_publisher" args="0.359 0 1.7 0 0 0 base_link $(arg gps_tf) 10" /> -->
  <node pkg="tf" type="static_transform_publisher" name="imu2base_publisher" args="0 0 0.88 3.141592 0 0 base_link $(arg imu_tf) 10" />
  
  <!-- in case you use velodyne_driver, comment out the following line -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" output="screen"/>

  <!-- prefiltering_nodelet -->
  <node pkg="nodelet" type="nodelet" name="prefiltering_nodelet" args="load hdl_graph_slam/PrefilteringNodelet $(arg nodelet_manager)">
    <remap from="/velodyne_points" to="$(arg points_topic)" />
    <remap from="/imu/data" to="$(arg imu_topic)" />
    <param name="deskewing" value="$(arg enable_imu_deskewing)" />
    <!-- in case base_link_frame is blank, mapping will be performed in the lidar frame -->
    <param name="base_link_frame" value="base_link" />
    <!-- distance filter -->
    <param name="use_distance_filter" value="true" />
    <param name="distance_near_thresh" value="10.0" />
    <param name="distance_far_thresh" value="200.0" />
    <!-- NONE, VOXELGRID, or APPROX_VOXELGRID -->
    <param name="downsample_method" value="NONE" />
    <param name="downsample_resolution" value="0.2" />
    <!-- NONE, RADIUS, or STATISTICAL -->
    <param name="outlier_removal_method" value="RADIUS" />
    <param name="statistical_mean_k" value="30" />
    <param name="statistical_stddev" value="1.1" />
    <param name="radius_radius" value="0.5" />
    <param name="radius_min_neighbors" value="2" />
  </node>

  <!-- scan_matching_odometry_nodelet -->
  <node pkg="nodelet" type="nodelet" name="scan_matching_odometry_nodelet" args="load hdl_graph_slam/ScanMatchingOdometryNodelet $(arg nodelet_manager)">
    <param name="points_topic" value="$(arg points_topic)" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <param name="robot_odom_frame_id" value="$(arg robot_odom_frame_id)" />
    <!-- 해당 값을 지나면 scan matching에 사용하는 target을 현재값으로 바꿈 -->
    <param name="keyframe_delta_trans" value="1.5" /> 
    <param name="keyframe_delta_angle" value="0.75" />
    <param name="keyframe_delta_time" value="10.0" />
    <param name="enable_robot_odometry_init_guess" value="$(arg enable_robot_odometry_init_guess)" />
    <!-- 해당 값은 scan matching 결과가 아래 trans, angle 값을 넘으면 에러라고 판단하여 변환 포기 -->
    <param name="transform_thresholding" value="false" />
    <param name="max_acceptable_trans" value="100.0" />
    <param name="max_acceptable_angle" value="3.0" />
    <!-- 이게 문제인가 -->
    <param name="downsample_method" value="NONE" />
    <param name="downsample_resolution" value="0.3" />
    <!-- ICP, GICP, NDT, GICP_OMP, NDT_OMP, FAST_GICP(recommended), or FAST_VGICP -->
    <param name="registration_method" value="$(arg matching_algo)" />
    <param name="reg_num_threads" value="0" />
    <param name="reg_transformation_epsilon" value="0.001"/>
    <param name="reg_maximum_iterations" value="256"/>
    <param name="reg_max_correspondence_distance" value="0.3"/>
    <param name="reg_max_optimizer_iterations" value="20"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="60"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
  </node>

  <!-- floor_detection_nodelet -->
  <node pkg="nodelet" type="nodelet" name="floor_detection_nodelet" args="load hdl_graph_slam/FloorDetectionNodelet $(arg nodelet_manager)" if="$(arg enable_floor_detection)">
    <param name="points_topic" value="$(arg points_topic)" />
    <param name="tilt_deg" value="0.0" />
    <param name="sensor_height" value="2.0" />
    <param name="height_clip_range" value="1.0" />
    <param name="floor_pts_thresh" value="512" />
    <param name="use_normal_filtering" value="true" />
    <param name="normal_filter_thresh" value="20.0" />
  </node>

  <!-- hdl_graph_slam_nodelet -->
  <node pkg="nodelet" type="nodelet" name="hdl_graph_slam_nodelet" args="load hdl_graph_slam/HdlGraphSlamNodelet $(arg nodelet_manager)">
    <param name="points_topic" value="$(arg points_topic)" />
    <!-- frame settings -->
    <param name="map_frame_id" value="$(arg map_frame_id)" />
    <param name="odom_frame_id" value="$(arg lidar_odom_frame_id)" />
    <!-- optimization params -->
    <!-- typical solvers: gn_var, gn_fix6_3, gn_var_cholmod, lm_var, lm_fix6_3, lm_var_cholmod, ... -->
    <param name="g2o_solver_type" value="lm_var_cholmod" />
    <param name="g2o_solver_num_iterations" value="1024" />
    
    <!-- constraint switches -->
    <param name="enable_gps" value="$(arg enable_gps)" />
    <param name="gps_frame_id" value="$(arg gps_tf)" />
    <remap from="/gps/navsat" to="$(arg gps_topic)"/>
    <param name="enable_imu_acceleration" value="$(arg enable_imu_acc)" />
    <param name="enable_imu_orientation" value="$(arg enable_imu_ori)" />
    <remap from="/gpsimu_driver/imu_data" to="$(arg imu_topic)" />

    <!-- keyframe registration params -->
    <!-- 최대 업데이트 키프레임 갯수 -->
    <param name="max_keyframes_per_update" value="10" />
    <!-- 해당 값보다 작으면 keyframe을 반영안함 / 하나라도 크면 반영 -->
    <param name="keyframe_delta_trans" value="7.5" />
    <param name="keyframe_delta_angle" value="0.75" />
    <!-- fix first node for optimization stability -->
    <param name="fix_first_node" value="true"/>
    <param name="fix_first_node_stddev" value="10 10 10 1 1 1"/>
    <param name="fix_first_node_adaptive" value="true"/>
    <!-- loop closure params -->
    <!-- 여기  -->
    <!-- 해당 값보다 거리가 크면 루프 검색 안함 / 키프레임 간의 위치가 너무 크면 검사 안함-->
    <param name="distance_thresh" value="30.0" />
    <!-- <param name="distance_thresh" value="15.0" /> -->
    <!-- 이동 거리가 해당 값보다 작으면 루프 검색 안함 / 너무 가까운 키 프레임끼리 검사 안함 -->
    <param name="accum_distance_thresh" value="80.0" />
    <!-- <param name="accum_distance_thresh" value="20.0" /> -->
    <!-- 마지막 루프 위치와 최소 거리 -->
    <param name="min_edge_interval" value="40.0" />
    <!-- 정확도가 아래값보다 낮아야 루프로 판단 -->
    <param name="fitness_score_thresh" value="2.2" />

    <!-- scan matching params -->
    <param name="registration_method" value="$(arg matching_algo)" />
    <param name="reg_num_threads" value="0" />
    <param name="reg_transformation_epsilon" value="0.001"/>
    <param name="reg_maximum_iterations" value="256"/>
    <param name="reg_max_correspondence_distance" value="0.5"/>
    <param name="reg_max_optimizer_iterations" value="20"/>
    <param name="reg_use_reciprocal_correspondences" value="false"/>
    <param name="reg_correspondence_randomness" value="40"/>
    <param name="reg_resolution" value="1.0" />
    <param name="reg_nn_search_method" value="DIRECT7" />
    <!-- edge params -->
    <!-- GPS -->
    <param name="gps_edge_robust_kernel" value="PseudoHuber" />
    <param name="gps_edge_robust_kernel_size" value="0.001" />
    <!-- 값이 낮을 수록 높은 신뢰도가 높음 -->
    <!-- <param name="gps_edge_stddev_xy" value="0.05" />
    <param name="gps_edge_stddev_z" value="0.75" /> -->
    <param name="gps_edge_stddev_xy" value="20.0" />
    <param name="gps_edge_stddev_z" value="10.0" />
    <!-- IMU orientation -->
    <param name="imu_orientation_edge_robust_kernel" value="NONE" />
    <param name="imu_orientation_edge_stddev" value="1.0" />
    <!-- IMU acceleration (gravity vector) -->
    <param name="imu_acceleration_edge_robust_kernel" value="NONE" />
    <param name="imu_acceleration_edge_stddev" value="3.0" />
    <!-- ground plane -->
    <param name="floor_edge_robust_kernel" value="NONE" />
    <param name="floor_edge_stddev" value="10.0" />
    <!-- scan matching -->
    <!-- robust kernels: NONE, Cauchy, DCS, Fair, GemanMcClure, Huber, PseudoHuber, Saturated, Tukey, Welsch -->
    <param name="odometry_edge_robust_kernel" value="NONE" />
    <param name="odometry_edge_robust_kernel_size" value="1.0" />
    <param name="loop_closure_edge_robust_kernel" value="Huber" />
    <param name="loop_closure_edge_robust_kernel_size" value="1.0" />
    <!-- cov 설정  -->
    <param name="use_const_inf_matrix" value="false" />
    <param name="const_stddev_x" value="0.25" />
    <param name="const_stddev_q" value="0.05" />
    <param name="var_gain_a" value="20.0" />
    <param name="min_stddev_x" value="0.1" />
    <param name="max_stddev_x" value="5.0" />
    <param name="min_stddev_q" value="0.05" />
    <param name="max_stddev_q" value="0.2" />
    <!-- update params -->
    <!-- 해당 주기마다 그래프 최적화 수행 -->
    <param name="graph_update_interval" value="3.0" />
    <!-- map cloud 생성 주기-->
    <param name="map_cloud_update_interval" value="20.0" />
    <param name="map_cloud_resolution" value="0.0" />
  </node>

  <node pkg="hdl_graph_slam" type="map2odom_publisher.py" name="map2odom_publisher" />
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find hdl_graph_slam)/rviz/hdl_graph_slam.rviz" />
</launch>
